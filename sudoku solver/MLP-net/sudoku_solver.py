# -*- coding: utf-8 -*-
"""sudoku_solver

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cYY1yD7d6ftj-csSrIoClIQt6PeNuzgr
"""

from google.colab import drive
import numpy as np
import pandas as pd
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"
drive.mount('/content/gdrive')

def load_data():

    sudokus = pd.read_csv('/content/gdrive/My Drive/Sudoku/sudoku.csv').values

    quizzes, solutions = sudokus.T
    flatX = np.array([np.reshape([int(d) for d in flatten_grid], (9, 9))
                      for flatten_grid in quizzes])
    flaty = np.array([np.reshape([int(d) for d in flatten_grid], (9, 9))
                      for flatten_grid in solutions])
    
    return flatX,flaty

x,y = load_data()
x.shape
y.shape

from keras import Model, Sequential
from keras.callbacks import EarlyStopping
from keras.layers import Dense, Dropout, Flatten, Input
from keras.utils import to_categorical

input_shape = (9,9,10)
model = Sequential()
model.add(Dense(64,activation = 'relu',input_shape=input_shape))
model.add(Dropout(0.2))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.2))
model.add(Flatten())


grid = Input(shape=input_shape)
features = model(grid)  

digit_placeholders = [
    Dense(9, activation='softmax')(features)
    for i in range(81)
]

solver = Model(grid, digit_placeholders)  # build the whole model
solver.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# from keras.utils import plot_model
# plot_model(solver, to_file='model.png')

from sklearn.model_selection import train_test_split

train_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.20)

Xtrain = to_categorical(train_x).astype('float32')  # from ytrain cause we will creates quizzes from solusions
Xtest = to_categorical(test_x).astype('float32')

ytrain = to_categorical(train_y-1).astype('float32') # (y - 1) because we 
ytest = to_categorical(test_y-1).astype('float32')

def remove_zeros(Xtrain,n_delete = 0):
  grids = Xtrain.argmax(3)  
  for grid in grids:
    grid.flat[np.random.randint(0, 81, n_delete)] = 0 
  return to_categorical(grids)

history = solver.fit(remove_zeros(Xtrain,0),[ytrain[:, i, j, :] for i in range(9) for j in range(9)],batch_size=256,epochs=200,verbose=1)