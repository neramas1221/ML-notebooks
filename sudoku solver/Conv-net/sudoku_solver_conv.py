# -*- coding: utf-8 -*-
"""sudoku_solver_conv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A9ha_tflmFHbO3Xon4R2TncR1-LZTnwN
"""

from google.colab import drive
import numpy as np
import pandas as pd
from tqdm import tqdm
from IPython.core.interactiveshell import InteractiveShell
from sklearn.model_selection import train_test_split
InteractiveShell.ast_node_interactivity = "all"
drive.mount('/content/gdrive')

df_sudoku = pd.read_csv('/content/gdrive/My Drive/Sudoku/sudoku.csv')
df_sudoku.columns

def convert_data(data):
  x =[]
  y =[]

  for i in tqdm(data["quizzes"]):
    temp = np.array([int(j) for j in i]).reshape((9,9,1))
    x.append(temp)
  x = np.array(x)
  x = x/9
  x = x -.5

  for i in tqdm(data["solutions"]):
    temp = np.array([int(j) for j in i]).reshape((81,1)) -1
    y.append(temp)
  y = np.array(y)
  
  x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2)
  
  return x_train,x_test,y_train,y_test

x_train,x_test,y_train,y_test = convert_data(df_sudoku)

from keras.layers import Dense,Conv2D,Dropout,Flatten,Activation,Reshape
from keras.models import Sequential

model = Sequential()
model.add(Conv2D(64, kernel_size=(3,3), activation='relu', padding='same', input_shape=(9,9,1)))
model.add(Dropout(0.2))
model.add(Conv2D(64, kernel_size=(3,3),activation='relu',padding = 'same'))
model.add(Dropout(0.2))
model.add(Conv2D(128, kernel_size=(3,3),activation='relu',padding = 'same'))
model.add(Flatten())
model.add(Dense(81*9))
model.add(Reshape((-1, 9)))
model.add(Activation('softmax'))
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam')
# from keras.utils import plot_model
# plot_model(model, to_file='model.png')

y_train[0]

history = model.fit(x_train,y_train,epochs=100,batch_size=2000,validation_data=(x_test,y_test))

def solve_sudoku(game,model):
    
    game = game.replace('\n', '')
    game = game.replace(' ', '')
    game = np.array([int(j) for j in game]).reshape((9,9,1))
    game = (game/9)-.5
    game = model.predict(game.reshape(1,9,9,1))
    return game

def denorm(a):
    
    return (a+.5)*9

game = '''
          0 8 0 0 3 2 0 0 1
          7 0 3 0 8 0 0 0 2
          5 0 0 0 0 7 0 3 0
          0 5 0 0 0 1 9 7 0
          6 0 0 7 0 9 0 0 8
          0 4 7 2 0 0 0 5 0
          0 2 0 6 0 0 0 0 9
          8 0 0 0 9 0 3 0 5
          3 0 0 8 2 0 0 1 0
      '''
game = solve_sudoku(game,model)
results = game
result = result.squeeze()
pred = np.argmax(result, axis=1).reshape((9,9))+1 
pred
print("\n")